{"version":3,"sources":["features/widgets/keyboard/index.tsx","features/core/event-emitter/index.ts","features/core/animation/index.ts","features/core/visual-player/index.ts","features/widgets/note-field/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Key","styled","className","pressed","black","css","isBlack","key","some","blackKey","keyboardKeys","Array","from","_","i","Keyboard","start","end","pressedKeys","keys","map","index","pressedKey","slice","EventEmitter","listeners","on","listener","push","remove","filter","subscribed","emit","state","forEach","Animation","animation","isPlaying","isStarted","startTime","time","event","onFrame","loop","requestAnimationFrame","stop","cancelAnimationFrame","pause","Error","resume","initPlayerState","currentNotes","currentNotesStart","currentNotesEnd","notes","currentTick","tickLength","VisualPlayer","midi","trackToPlay","speed","window","tempo","this","header","tempos","bpm","onStateChange","tracks","duration","Math","floor","note","position","length","windowSeconds","play","ppq","Note","div","attrs","props","style","bottom","height","size","Line","createLines","result","fill","notePosition","NoteField","line","useMIDIPlayer","track","useState","option","none","setMidi","fetchMidi","a","Midi","fromUrl","midiFile","useEffect","useMidiFile","MidiApp","player","playerState","setPlayerState","display","flexDirection","onClick","toFixed","App","useMIDI","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2049a45f.chunk.js","sourcesContent":["import styled, {css} from \"styled-components\"\n\ninterface KeyProps {\n  className?: string\n  black: boolean\n  pressed: boolean\n}\n\nexport const Key = styled(({className}: KeyProps) => {\n\n  return (\n    <div className={className}>\n\n    </div>\n  )\n})`\n  box-sizing: border-box;\n  width: 20px;\n  height: 100%;\n  padding: 2px;\n  background: ${({pressed}) => pressed ? \"#c9c9c9\" : \"#f6f6f6\"} ${({black}) => black && css<KeyProps>`\n    width: 12px;\n    background: ${({pressed}) => pressed ? \"#2d2d2d\" : \"#505050\"}\n  `}\n`\n\nexport interface KeyboardProps {\n  className?: string\n  start?: number\n  end?: number\n  pressedKeys?: number[]\n}\n\nexport const isBlack = (key: number) => {\n  const blackKeys = [1, 3, 6, 8, 10]\n  return blackKeys.some(blackKey => blackKey === key % 12)\n}\n\nexport const keyboardKeys = Array.from<unknown, boolean>(Array(127), (_, i) => isBlack(i))\n\nconst Keyboard = styled(\n  ({\n     className,\n     start = 48,\n     end = 71,\n     pressedKeys = [48, 50, 52],\n   }: KeyboardProps) => {\n    const keys = keyboardKeys\n      .map((black, index) => ({index, black, pressed: pressedKeys.some(pressedKey => pressedKey === index)}))\n      .slice(start, end + 1)\n    return (\n      <div className={className}>\n        {keys.map(key => <Key key={key.index} black={key.black} pressed={key.pressed}/>)}\n      </div>\n    )\n  })`\n  height: 50px;\n  display: flex;\n`\n\n\nexport default Keyboard\n","type Listener<T> = (state: T) => void\n\nclass EventEmitter<T> {\n  private listeners: Listener<T>[] = []\n\n  public on = (listener: Listener<T>) => {\n    this.listeners.push(listener)\n  }\n\n  public remove = (listener: Listener<T>) => {\n    this.listeners = this.listeners.filter(subscribed => subscribed !== listener)\n  }\n\n  public emit = (state: T) => {\n    this.listeners.forEach(listener => listener(state))\n  }\n}\n\nexport default EventEmitter\n","import EventEmitter from \"../event-emitter\"\n\ninterface AnimationState {\n  isPlaying: boolean\n  startTime: number\n  time: number\n}\n\n/**\n * requestAnimationFrame wrapper\n */\nclass Animation {\n  private animation = 0\n  private isPlaying = false\n  private isStarted = false\n  private startTime = 0\n  private time = 0\n  private event = new EventEmitter<AnimationState>()\n\n  public onFrame = (listener: (state: AnimationState) => void) => {\n    this.event.on(listener)\n  }\n\n  private loop = (time: number) => {\n    if (!this.isStarted && this.isPlaying) {\n      this.startTime = time / 1000\n      this.isStarted = true\n    }\n\n    if (this.isPlaying) {\n      this.time = time / 1000 - this.startTime\n      this.event.emit({time: this.time, startTime: this.startTime, isPlaying: this.isPlaying})\n      this.animation = requestAnimationFrame(this.loop)\n    }\n  }\n\n  public start = () => {\n    this.isPlaying = true\n    this.animation = requestAnimationFrame(this.loop)\n  }\n\n  public stop = () => {\n    cancelAnimationFrame(this.animation)\n    this.isPlaying = false\n    this.isStarted = false\n    this.time = 0\n    this.startTime = 0\n    this.event.emit({time: 0, startTime: 0, isPlaying: false})\n  }\n\n  public pause = () => {\n    throw Error(\"not implemented\")\n  }\n\n  public resume = () => {\n    throw Error(\"not implemented\")\n  }\n}\n\nexport default Animation\n","import {Midi} from \"@tonejs/midi\"\nimport Animation from \"../animation\"\n\nexport interface DisplayNote {\n  note: number\n  position: number\n  length: number\n}\n\nexport interface PlayerState {\n  isPlaying: boolean\n  currentNotes: DisplayNote[]\n  currentTick: number\n  currentNotesStart: DisplayNote[]\n  currentNotesEnd: DisplayNote[]\n  notes: DisplayNote[]\n  tickLength: number\n  time: number\n}\n\nexport const initPlayerState: PlayerState = {\n  isPlaying: false,\n  currentNotes: [],\n  currentNotesStart: [],\n  currentNotesEnd: [],\n  notes: [],\n  currentTick: 0,\n  tickLength: 0,\n  time: 0,\n}\n\n/**\n * Give info about midi notes to an UI\n */\nclass VisualPlayer {\n  constructor(\n    private readonly midi: Midi,\n    private trackToPlay: number = 1,\n    private speed: number = 1,\n    private window: number = 16,\n  ) {\n    //this.midi.header.setTempo(70)\n  }\n\n  private get tickLength() { return (60 / this.tempo / this.midi.header.ppq) * this.speed }\n  private get windowSeconds() { return this.tickLength * this.window }\n  private tempo = this.midi.header.tempos[0].bpm\n  private currentTick = 0\n  private animation = new Animation()\n\n  public onStateChange = (listener: (state: PlayerState) => void) => {\n    this.animation.onFrame(({time, isPlaying}) => {\n      if (time > this.midi.tracks[this.trackToPlay].duration) {\n        this.stop()\n      } else {\n        this.currentTick = Math.floor(time / this.tickLength)\n        const notes = this.midi.tracks[this.trackToPlay].notes\n          .map(({midi, duration, time: noteTime}) => ({note: midi, position: noteTime - time, length: duration}))\n\n        const currentNotes = notes\n          .filter(({length, position}) => position <= 0 && position * -1 <= length)\n\n        const currentNotesStart = notes\n          .filter(({position}) => position <= this.windowSeconds && position * -1 <= this.windowSeconds)\n\n        const currentNotesEnd = notes\n          .filter(({length, position}) => position <= -length + this.windowSeconds && position * -1 <= length + this.windowSeconds)\n\n        listener({\n          currentTick: this.currentTick,\n          notes,\n          currentNotes,\n          currentNotesStart,\n          currentNotesEnd,\n          isPlaying: isPlaying,\n          tickLength: this.tickLength,\n          time,\n        })\n      }\n    })\n  }\n\n  public play = () => {\n    this.animation.start()\n  }\n\n  public pause = () => {\n    this.animation.pause()\n  }\n\n  public stop = () => {\n    this.animation.stop()\n  }\n\n  public resume = () => {\n    this.animation.resume()\n  }\n}\n\nexport default VisualPlayer;\n","import {DisplayNote} from \"../../core/visual-player\"\nimport styled, {css} from \"styled-components\"\nimport {isBlack} from \"../keyboard\"\n\ninterface NoteProps {\n  position: number\n  size: number\n}\nconst Note = styled.div.attrs((props: NoteProps) => ({\n  style: {bottom: `${props.position}px`, height: `${props.size}px`}\n}))<NoteProps>`\n  position: absolute;\n  width: 100%;\n  bottom: 0;\n  background: #ff7878;\n`\n\ninterface LineProps {\n  black: boolean,\n  pressed?: boolean,\n}\n\nconst Line = styled.div<LineProps>`\n  position: relative;\n  box-sizing: border-box;\n  width: 20px;\n  height: 100%;\n  border: solid 1px #989797;\n  background: ${({pressed}) => pressed ? \"#c9c9c9\" : \"#f6f6f6\"} ${({black}) => black && css<LineProps>`\n    width: 12px;\n    background: ${({pressed}) => pressed ? \"#b2b2b2\" : \"#dedede\"}\n  `}\n  overflow: no-display;\n`\n\ninterface NoteFieldProps {\n  notes: DisplayNote[]\n  className?: string\n  start?: number\n  end?: number\n}\n\nconst createLines = (notes: DisplayNote[], start: number, end: number) => {\n  let result: DisplayNote[][] = Array(end - start + 1).fill([])\n  for (const note of notes) {\n    const notePosition = note.note - start\n    if (result.length > notePosition) result[notePosition] = [...result[notePosition], note]\n  }\n  return result\n}\n\nconst NoteField = styled(({notes = [], className, start = 48, end = 71}: NoteFieldProps) => {\n\n  return (\n    <div className={className}>\n      {createLines(notes, start, end).map((line, i) =>\n        <Line black={isBlack(i + start)}>\n          {line.map(note => <Note position={note.position * 100} size={note.length * 100}/>)}\n        </Line>\n      )}\n    </div>\n  )\n})`\n  height: 300px;\n  display: flex;\n  overflow: hidden;\n`\n\n\n\nexport default NoteField\n","import React, {useEffect, useRef, useState} from 'react'\nimport {Input, MIDIFilter, MIDINote, useMIDI, useMIDINote} from \"@react-midi/hooks\"\nimport Keyboard from \"./features/widgets/keyboard\"\nimport {Midi} from \"@tonejs/midi\"\nimport VisualPlayer, {initPlayerState} from \"./features/core/visual-player\"\nimport {option} from \"fp-ts\"\nimport {Option} from \"fp-ts/es6/Option\"\nimport NoteField from \"./features/widgets/note-field\"\n\nexport const useMIDINotes = (input: Input, filter: MIDIFilter = {}) => {\n  const [notes, setNotes] = useState<MIDINote[]>([])\n  const value = useMIDINote(input, filter)\n  useEffect(() => {\n    if (!input) return\n    if (value?.on) setNotes(notes => [...notes, value])\n    else setNotes(notes => notes.filter((n) => n.note !== value.note)) // Note off, remove note from array (maybe\n                                                                        // check for channel?)\n  }, [input, value])\n  return notes\n}\n\nexport const useMidiFile = (): Option<Midi> => {\n  const [midi, setMidi] = useState<Option<Midi>>(option.none)\n\n  const fetchMidi = async () => {\n    const midiFile = await Midi.fromUrl(`/synthesia-react/example2.mid`)\n\n    setMidi(option.some(midiFile))\n  }\n\n  useEffect(() => {\n    fetchMidi()\n  }, [])\n  return midi;\n}\n\n\nexport const useMIDIPlayer = ({track = 1}: { track: number }) => {\n  const midi = useMidiFile()\n  return option.map((midi: Midi) => new VisualPlayer(midi, track, 0.5))(midi)\n}\n\nconst MidiApp = ({player}: {player: VisualPlayer}) => {\n  const [playerState, setPlayerState] = useState(initPlayerState);\n  const {currentNotes, isPlaying, notes} = playerState;\n  useEffect(() => {\n    player.onStateChange(setPlayerState)\n  }, [player])\n\n  return (\n    <div style={{display: \"flex\", flexDirection: \"column\"}}>\n      <NoteField notes={notes}/>\n      <Keyboard pressedKeys={currentNotes.map(({note}) => note)}/>\n      <button onClick={isPlaying ? player.stop : player.play}>\n        {isPlaying ? \"stop\" : \"play\"}\n      </button>\n      <h1>{playerState.time.toFixed(3)}</h1>\n    </div>\n  )\n}\n\nconst App = () => {\n  const midi = useMIDI()\n  const player = useMIDIPlayer({track: 1})\n\n  return option.match(\n    () => <div>loading...</div>,\n    (player: VisualPlayer) => <MidiApp player={player}/>\n  )(player)\n}\n\n\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}