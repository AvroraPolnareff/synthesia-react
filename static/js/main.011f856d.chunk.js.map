{"version":3,"sources":["features/widgets/keyboard/index.tsx","features/core/visual-player-core/index.ts","features/widgets/note-field/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Key","styled","className","pressed","black","css","isBlack","key","some","blackKey","keyboardKeys","Array","from","_","i","Keyboard","start","end","pressedKeys","keys","map","index","pressedKey","slice","initPlayerState","isPlaying","currentNotes","notes","currentTick","tickLength","VisualPlayerCore","midi","trackToPlay","speed","tempo","this","header","tempos","bpm","listeners","deltaframe","Deltaframe","minFps","targetFps","delta","time","startTime","state","nextState","Math","floor","tracks","duration","note","position","length","filter","passStateToListeners","forEach","listener","onStateChange","callback","push","play","Date","now","stop","pause","ppq","Note","div","attrs","props","style","bottom","height","size","Line","createLines","result","fill","notePosition","NoteField","line","useMIDIPlayer","track","useState","option","none","setMidi","fetchMidi","a","Midi","fromUrl","midiFile","useEffect","useMidiFile","MidiApp","player","playerState","setPlayerState","display","flexDirection","onClick","App","useMIDI","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.011f856d.chunk.js","sourcesContent":["import styled, {css} from \"styled-components\"\n\ninterface KeyProps {\n  className?: string\n  black: boolean\n  pressed: boolean\n}\n\nexport const Key = styled(({className}: KeyProps) => {\n\n  return (\n    <div className={className}>\n\n    </div>\n  )\n})`\n  box-sizing: border-box;\n  width: 20px;\n  height: 100%;\n  padding: 2px;\n  background: ${({pressed}) => pressed ? \"#c9c9c9\" : \"#f6f6f6\"} ${({black}) => black && css<KeyProps>`\n    width: 12px;\n    background: ${({pressed}) => pressed ? \"#2d2d2d\" : \"#505050\"}\n  `}\n`\n\nexport interface KeyboardProps {\n  className?: string\n  start?: number\n  end?: number\n  pressedKeys?: number[]\n}\n\nexport const isBlack = (key: number) => {\n  const blackKeys = [1, 3, 6, 8, 10]\n  return blackKeys.some(blackKey => blackKey === key % 12)\n}\n\nexport const keyboardKeys = Array.from<unknown, boolean>(Array(127), (_, i) => isBlack(i))\n\nconst Keyboard = styled(\n  ({\n     className,\n     start = 48,\n     end = 71,\n     pressedKeys = [48, 50, 52],\n   }: KeyboardProps) => {\n    const keys = keyboardKeys\n      .map((black, index) => ({index, black, pressed: pressedKeys.some(pressedKey => pressedKey === index)}))\n      .slice(start, end + 1)\n    return (\n      <div className={className}>\n        {keys.map(key => <Key key={key.index} black={key.black} pressed={key.pressed}/>)}\n      </div>\n    )\n  })`\n  height: 50px;\n  display: flex;\n`\n\n\nexport default Keyboard\n","import {Midi} from \"@tonejs/midi\"\nimport Deltaframe from \"deltaframe\"\n\nexport interface DisplayNote {\n  note: number\n  position: number\n  length: number\n}\n\nexport interface PlayerState {\n  isPlaying: boolean,\n  currentNotes: DisplayNote[],\n  currentTick: number,\n  notes: DisplayNote[]\n  tickLength: number\n}\n\nexport const initPlayerState: PlayerState = {\n  isPlaying: false,\n  currentNotes: [],\n  notes: [],\n  currentTick: 0,\n  tickLength: 0,\n}\n\ntype Listener = (state: PlayerState) => void\n\nexport class VisualPlayerCore {\n  constructor(\n    private readonly midi: Midi,\n    private trackToPlay: number = 1,\n    private speed: number = 1,\n  ) { }\n\n  private get tickLength() { return 60 / this.tempo / this.midi.header.ppq * this.speed }\n\n  private tempo = this.midi.header.tempos[0].bpm\n  private currentTick = 0\n  private isPlaying = false\n  private listeners: Listener[] = []\n  private deltaframe = new Deltaframe({minFps: 30, targetFps: 144})\n  private delta = 16.6;\n  private time = 0;\n  private startTime = 0;\n  private state = initPlayerState\n\n  private nextState = (): PlayerState => {\n    if (this.isPlaying) this.currentTick = Math.floor(this.time / this.tickLength)\n    const notes = this.midi.tracks[this.trackToPlay].notes\n      .map(({midi, duration, time}) => ({note: midi, position: time - this.time, length: duration}))\n    const currentNotes = notes.filter(note => note.position <= 0 && note.position * -1 <= note.length)\n\n    return {\n      currentTick: this.currentTick,\n      notes,\n      currentNotes,\n      isPlaying: this.isPlaying,\n      tickLength: this.tickLength,\n    }\n  }\n\n  private passStateToListeners = (state: PlayerState) => { this.listeners.forEach((listener) => listener(state)) }\n\n  public onStateChange = (callback: (state: PlayerState) => void) => {\n    this.listeners.push(callback)\n    this.passStateToListeners(this.nextState())\n  }\n\n  public play = () => {\n    this.isPlaying = true\n    this.startTime = Date.now()\n    this.deltaframe.start((time: number, delta: number) => {\n      this.time = (Date.now() - this.startTime) / 1000\n      this.delta = delta / 1000\n      if (this.time > this.midi.tracks[this.trackToPlay].duration) return this.stop()\n      this.passStateToListeners(this.nextState())\n    })\n  }\n\n  public pause = () => {\n    if (this.isPlaying) {\n      this.isPlaying = false\n      this.deltaframe.pause()\n    }\n    this.passStateToListeners(this.nextState())\n  }\n\n  public stop = () => {\n    this.isPlaying = false\n    this.deltaframe.stop()\n    this.deltaframe = new Deltaframe({minFps: 30, targetFps: 60})\n    this.time = 0\n    this.currentTick = 0\n    this.passStateToListeners(initPlayerState)\n  }\n}\n","import {DisplayNote} from \"../../core/visual-player-core\"\nimport styled, {css} from \"styled-components\"\nimport {array} from \"fp-ts\"\nimport {isBlack} from \"../keyboard\"\n\ninterface NoteProps {\n  position: number\n  size: number\n}\nconst Note = styled.div.attrs((props: NoteProps) => ({\n  style: {bottom: `${props.position}px`, height: `${props.size}px`}\n}))<NoteProps>`\n  position: absolute;\n  width: 100%;\n  bottom: 0;\n  background: #ff7878;\n`\n\ninterface LineProps {\n  black: boolean,\n  pressed?: boolean,\n}\n\nconst Line = styled.div<LineProps>`\n  position: relative;\n  box-sizing: border-box;\n  width: 20px;\n  height: 100%;\n  border: solid 1px #989797;\n  background: ${({pressed}) => pressed ? \"#c9c9c9\" : \"#f6f6f6\"} ${({black}) => black && css<LineProps>`\n    width: 12px;\n    background: ${({pressed}) => pressed ? \"#b2b2b2\" : \"#dedede\"}\n  `}\n  overflow: no-display;\n`\n\ninterface NoteFieldProps {\n  notes: DisplayNote[]\n  className?: string\n  start?: number\n  end?: number\n}\n\nconst createLines = (notes: DisplayNote[], start: number, end: number) => {\n  let result: DisplayNote[][] = Array(end - start + 1).fill([])\n  for (const note of notes) {\n    const notePosition = note.note - start\n    if (result.length > notePosition) result[notePosition] = [...result[notePosition], note]\n  }\n  return result\n}\n\nconst NoteField = styled(({notes = [], className, start = 48, end = 71}: NoteFieldProps) => {\n\n  return (\n    <div className={className}>\n      {createLines(notes, start, end).map((line, i) =>\n        <Line black={isBlack(i + start)}>\n          {line.map(note => <Note position={note.position * 100} size={note.length * 100}/>)}\n        </Line>\n      )}\n    </div>\n  )\n})`\n  height: 300px;\n  display: flex;\n  overflow: hidden;\n`\n\n\n\nexport default NoteField\n","import React, {useEffect, useRef, useState} from 'react'\nimport {Input, MIDIFilter, MIDINote, useMIDI, useMIDINote} from \"@react-midi/hooks\"\nimport Keyboard from \"./features/widgets/keyboard\"\nimport {Midi} from \"@tonejs/midi\"\nimport {initPlayerState, VisualPlayerCore} from \"./features/core/visual-player-core\"\nimport {option} from \"fp-ts\"\nimport {Option} from \"fp-ts/es6/Option\"\nimport NoteField from \"./features/widgets/note-field\"\n\nexport const useMIDINotes = (input: Input, filter: MIDIFilter = {}) => {\n  const [notes, setNotes] = useState<MIDINote[]>([])\n  const value = useMIDINote(input, filter)\n  useEffect(() => {\n    if (!input) return\n    if (value?.on) setNotes(notes => [...notes, value])\n    else setNotes(notes => notes.filter((n) => n.note !== value.note)) // Note off, remove note from array (maybe\n                                                                        // check for channel?)\n  }, [input, value])\n  return notes\n}\n\nexport const useMidiFile = (): Option<Midi> => {\n  const [midi, setMidi] = useState<Option<Midi>>(option.none)\n\n  const fetchMidi = async () => {\n    const midiFile = await Midi.fromUrl(`/synthesia-react/example2.mid`)\n\n    setMidi(option.some(midiFile))\n  }\n\n  useEffect(() => {\n    fetchMidi()\n  }, [])\n  return midi;\n}\n\n\nexport const useMIDIPlayer = ({track = 1}: { track: number }) => {\n  const midi = useMidiFile()\n  return option.map((midi: Midi) => new VisualPlayerCore(midi, track, 0.5))(midi)\n}\n\nconst MidiApp = ({player}: {player: VisualPlayerCore}) => {\n  const [playerState, setPlayerState] = useState(initPlayerState);\n  const {currentNotes, isPlaying, notes} = playerState;\n  useEffect(() => player.onStateChange(setPlayerState), [player])\n\n  return (\n    <div style={{display: \"flex\", flexDirection: \"column\"}}>\n      <NoteField notes={notes}/>\n      <Keyboard pressedKeys={currentNotes.map(({note}) => note)}/>\n      <button onClick={isPlaying ? player.stop : player.play}>\n        {isPlaying ? \"stop\" : \"play\"}\n      </button>\n    </div>\n  )\n}\n\nconst App = () => {\n  const midi = useMIDI()\n  const player = useMIDIPlayer({track: 1})\n\n  return option.match(\n    () => <div>loading...</div>,\n    (player: VisualPlayerCore) => <MidiApp player={player}/>\n  )(player)\n}\n\n\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}